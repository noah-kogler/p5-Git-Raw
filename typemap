Blame					T_GIT_REF
Blame_Hunk				T_GIT_REF
Blob					T_GIT_REF
Branch					T_GIT_REF
Commit					T_GIT_REF
Config					T_GIT_REF
Cert					T_GIT_REF
Cert_HostKey			T_GIT_REF
Cert_X509				T_GIT_REF
Cred					T_GIT_REF
Diff					T_GIT_REF
Diff_Delta				T_GIT_REF
Diff_File				T_GIT_REF
Diff_Hunk				T_GIT_REF
Diff_Line				T_GIT_REF
Diff_Stats				T_GIT_REF
Error					T_GIT_REF
Filter					T_GIT_REF
Filter_List				T_GIT_REF
Filter_Source			T_GIT_REF
Index					T_GIT_REF
Index_Conflict			T_GIT_REF
Index_Entry				T_GIT_REF
Indexer					T_GIT_REF
Mempack				    T_GIT_REF
Merge_File_Result		T_GIT_REF
Note					T_GIT_REF
Object					T_GIT_REF
Odb						T_GIT_REF
Odb_Backend				T_GIT_REF
Odb_Object				T_GIT_REF
Packbuilder				T_GIT_REF
Patch					T_GIT_REF
PathSpec				T_GIT_REF
PathSpec_MatchList		T_GIT_REF
Reflog					T_GIT_REF
Reflog_Entry			T_GIT_REF
RefSpec					T_GIT_REF
Reference				T_GIT_REF
Remote					T_GIT_REF
Repository				T_GIT_REF
Signature				T_GIT_REF
Tag					T_GIT_REF
TransferProgress		T_GIT_REF
Tree					T_GIT_REF
Tree_Builder				T_GIT_REF
Tree_Entry				T_GIT_REF
Walker					T_GIT_REF

OUTPUT
T_GIT_REF
	sv_setref_pv($arg, \"Git::Raw::${(my $ntt = $ntype) =~ s/_/::/g;\$ntt}\", (void *) $var);

INPUT
T_GIT_REF
	if (sv_isobject($arg) &&
	    sv_derived_from($arg, \"Git::Raw::${(my $ntt = $ntype) =~ s/_/::/g;\$ntt}\")) {
		$var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
	} else {
		$var = NULL;
		croak_usage(\"$var is not of type Git::Raw::${(my $ntt = $ntype) =~ s/_/::/g;\$ntt}\");
	}
